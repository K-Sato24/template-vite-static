@use "sass:meta";
@use "sass:math";

// =====================
// ベースフォントサイズを定義
// =====================
$base-font-size: 16 !default;

// =====================
// 数値のみを取り出す（単位を取り除く）
// =====================
// 参照：https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if meta.type-of($number) == "number" and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }
  @return $number;
}

// =====================
// vw 単位の計算関数
// =====================
@function vw($size, $window_width) {
  @return math.div($size, $window_width) * 100vw;
}

// =====================
// px を rem に変換する関数
// =====================
@function rem($pixels) {
  @return math.div($pixels, $base-font-size) * 1rem;
}

// =====================
// px を em に変換する関数
// =====================
@function em($px, $font-size: 16) {
  @return math.div($px, $font-size) * 1em;
}

// =====================
// font-size を clamp 関数で指定
// （リキッドレイアウトのためにルートフォントが変動している場合は不使用）
// =====================
@function clamps($min, $max, $minViewport, $maxViewport) {
  $vwScale: math.div(($max - $min), ($maxViewport - $minViewport));
  $baseOffset: $min - $minViewport * $vwScale;
  $minRem: math.div($min, $base-font-size);
  $maxRem: math.div($max, $base-font-size);
  $baseOffsetRem: math.div($baseOffset, $base-font-size);
  $vwScaleRem: $vwScale * 100;

  @return clamp(
    #{$minRem}rem,
    #{$baseOffsetRem}rem + #{$vwScaleRem}vw,
    #{$maxRem}rem
  );
}
